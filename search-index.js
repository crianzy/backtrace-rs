var N = null;var searchIndex = {};
searchIndex["backtrace"]={"doc":"A library for acquiring a backtrace at runtime","items":[[3,"Frame","backtrace","A trait representing one frame of a backtrace, yielded to the `trace` function of this crate.",N,N],[3,"Symbol","","A trait representing the resolution of a symbol in a file.",N,N],[3,"SymbolName","","A wrapper around a symbol name to provide ergonomic accessors to the demangled name, the raw bytes, the raw string, etc.",N,N],[3,"Backtrace","","Representation of an owned and self-contained backtrace.",N,N],[3,"BacktraceFrame","","Captured version of a frame in a backtrace.",N,N],[3,"BacktraceSymbol","","Captured version of a symbol in a backtrace.",N,N],[5,"trace","","Inspects the current call-stack, passing all active frames into the closure provided to calculate a stack trace.",N,[[["f"]]]],[5,"resolve","","Resolve an address to a symbol, passing the symbol to the specified closure.",N,N],[11,"ip","","Returns the current instruction pointer of this frame.",0,N],[11,"symbol_address","","Returns the starting symbol address of the frame of this function.",0,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"name","","Returns the name of this function.",1,[[["self"]],["option",["symbolname"]]]],[11,"addr","","Returns the starting address of this function.",1,[[["self"]],["option"]]],[11,"filename","","Returns the file name where this function was defined.",1,[[["self"]],["option",["path"]]]],[11,"lineno","","Returns the line number for where this symbol is currently executing.",1,[[["self"]],["option",["u32"]]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"new","","Creates a new symbol name from the raw underlying bytes.",2,N],[11,"as_str","","Returns the raw symbol name as a `str` if the symbols is valid utf-8.",2,[[["self"]],["option",["str"]]]],[11,"as_bytes","","Returns the raw symbol name as a list of bytes",2,N],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"clone","","",3,[[["self"]],["backtrace"]]],[11,"decode","","",3,[[["__d"]],["result",["backtrace"]]]],[11,"encode","","",3,[[["self"],["__s"]],["result"]]],[11,"clone","","",4,[[["self"]],["backtraceframe"]]],[11,"decode","","",4,[[["__d"]],["result",["backtraceframe"]]]],[11,"encode","","",4,[[["self"],["__s"]],["result"]]],[11,"clone","","",5,[[["self"]],["backtracesymbol"]]],[11,"decode","","",5,[[["__d"]],["result",["backtracesymbol"]]]],[11,"encode","","",5,[[["self"],["__s"]],["result"]]],[11,"new","","Captures a backtrace at the callsite of this function, returning an owned representation.",3,[[],["backtrace"]]],[11,"new_unresolved","","Similar to `new` except that this does not resolve any symbols, this simply captures the backtrace as a list of addresses.",3,[[],["backtrace"]]],[11,"frames","","Returns the frames from when this backtrace was captured.",3,N],[11,"resolve","","If this backtrace was created from `new_unresolved` then this function will resolve all addresses in the backtrace to their symbolic names.",3,[[["self"]]]],[11,"from","","",3,[[["vec",["backtraceframe"]]],["self"]]],[11,"into","","",3,[[["self"]],["vec",["backtraceframe"]]]],[11,"ip","","Same as `Frame::ip`",4,N],[11,"symbol_address","","Same as `Frame::symbol_address`",4,N],[11,"symbols","","Returns the list of symbols that this frame corresponds to.",4,N],[11,"name","","Same as `Symbol::name`",5,[[["self"]],["option",["symbolname"]]]],[11,"addr","","Same as `Symbol::addr`",5,[[["self"]],["option"]]],[11,"filename","","Same as `Symbol::filename`",5,[[["self"]],["option",["path"]]]],[11,"lineno","","Same as `Symbol::lineno`",5,[[["self"]],["option",["u32"]]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"default","","",3,[[],["backtrace"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_string","","",2,[[["self"]],["string"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,N],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]]],"paths":[[3,"Frame"],[3,"Symbol"],[3,"SymbolName"],[3,"Backtrace"],[3,"BacktraceFrame"],[3,"BacktraceSymbol"]]};
initSearch(searchIndex);
